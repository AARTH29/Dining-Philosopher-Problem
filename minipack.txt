#include <semaphore.h>
#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#define  N 5                                                                                       /*       (4)  0 (0)

                                                                                                       4                1(1)

                                                                                                         (3) 3       (2)2    */

#define hungry 1
#define thinking 0
#define eating 2

#define left (ph_no+(N-1))%N
#define right (ph_no+1)%N

sem_t mutex;          //will ensure no two philo take up forks or put down at same time
sem_t s[N];           //like personal lock!for sync

int status[N];        //hungry or thinking or eating


void test(int ph_no)
{
    if(status[ph_no]==hungry && status[left]!=eating &&status[right]!=eating)
    {
        status[ph_no]=eating;
        printf("Philosopher %d takes fork %d and %d\n",ph_no,left,ph_no);
        sem_post(&s[ph_no]);                                                 //sem_post(down),sem_wait(up)
        printf("Philosopher %d is Eating \n",ph_no);
    }
}
void take_fork(int ph_no)
{
    sem_wait(&mutex);
    status[ph_no]=hungry;
    printf("Philospher %d is Hungry\n",ph_no);
    test(ph_no);
    sem_post(&mutex);
    sleep(1);                                                //eating representing
    sem_wait(&s[ph_no]);
}

void put_fork(int ph_no)
{
    sem_wait(&mutex);
    printf("Philosopher %d putts fork %d and %d down\n",ph_no,left,ph_no);
    status[ph_no]=thinking;
    printf("Philosopher %d is Thinking \n",ph_no);
    test(left);                                                                 //let philo on eat if possible
    test(right);                                                               // let philo on right if possible
    sem_post(&mutex);
}

void *philosopher(void *no)
{
    while(1)
    {
        int *i = no;
        sleep(1);                                                  //thinking
        take_fork(*i);
        sleep(1);                                                  //eating
        put_fork(*i);
    }
}
int main()
{
    int i;
    int flag;
    int philo_no[N];
    for(i=0;i<N;i++)
    {
        philo_no[i] = i;                 //int sem_init(sem_t *sem, int pshared, unsigned int value);pshared=0 cannot be shared with processes,1 na can share
    }
    pthread_t thread_id[N];
    flag = sem_init(&mutex,0,1);               //mutex initially 1..........to take up fork down it and take ,put down fork up it
    if(flag!=0)
    {
        printf("semaphore initialisation failed");
    }
    for(i=0;i<N;i++)
    {
        flag = sem_init(&s[i],0,0);            //semaphores initially 0...........gonna eat[taken up fork] up personal lock,after eating down it
        if(flag!=0)
        {
                printf("semaphore initilization failed");
        }
    }
     for(i=0;i<N;i++)
    {
        flag = pthread_create(&thread_id[i],NULL,philosopher,&philo_no[i]);
        if(flag!=0)
        {
                printf("Thread creation failed");
        }
        printf("Philosopher %d is Thinking\n",i);
    }
    for(i=0;i<N;i++)
    {
        flag = pthread_join(thread_id[i],NULL);
        if(flag!=0)
        {
                printf("Thread joining failed");
        }
    }
}
